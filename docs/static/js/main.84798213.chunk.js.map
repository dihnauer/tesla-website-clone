{"version":3,"sources":["features/car/carSlice.js","components/Header.js","components/Section.js","components/Home.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["carSlice","createSlice","name","initialState","cars","reducers","selectCars","state","car","Header","useState","burgerStatus","setBurgerStatus","useSelector","Container","href","src","process","alt","map","index","RightMenu","CustomMenu","onClick","BurgerNav","show","CloseWrapper","CustomClose","styled","div","Menu","MenuIcon","props","CloseIcon","Section","title","description","leftBtnText","rightBtnText","backgroundImg","Wrap","bgImage","bottom","ItemText","Buttons","ButtonGroup","LeftButton","RightButton","DownArrow","img","Home","App","className","store","configureStore","reducer","carReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84798213.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    cars: [ 'Model S', 'Model 3', 'Model X', 'Model Y' ]\r\n};\r\n\r\nconst carSlice = createSlice({\r\n    name: 'car',\r\n    initialState,\r\n    reducers: {}\r\n});\r\n\r\nexport const selectCars = state => state.car.cars\r\n\r\nexport default carSlice.reducer","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport { selectCars } from '../features/car/carSlice'\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction Header() {\r\n\r\n  const [burgerStatus, setBurgerStatus] = useState(false);\r\n\r\n  const cars = useSelector(selectCars);\r\n\r\n  return (\r\n    <Container>\r\n      <a href=\"\">\r\n        <img src={`${process.env.PUBLIC_URL}/images/logo.svg`} alt=\"\" />\r\n      </a>\r\n\r\n      <Menu>\r\n        {cars && cars.map((car, index) => (\r\n          <a key={index} href=\"#\">{car}</a>\r\n        ))}\r\n      </Menu>\r\n\r\n      <RightMenu>\r\n        <a href=\"#\">Shop</a>\r\n        <a href=\"#\">Tesla Account</a>\r\n\r\n        <CustomMenu\r\n          onClick={() => setBurgerStatus(true)}\r\n        />\r\n      </RightMenu>\r\n\r\n      <BurgerNav show={burgerStatus}>\r\n        <CloseWrapper>\r\n          <CustomClose\r\n            onClick={() => setBurgerStatus(false)}\r\n          />\r\n        </CloseWrapper>\r\n\r\n        {cars && cars.map((car, index) => (\r\n          <li key={index}><a href=\"#\">{car}</a></li>\r\n        ))}\r\n\r\n        <li><a href=\"#\">Existing Inventory</a></li>\r\n        <li><a href=\"#\">Used Inventory</a></li>\r\n        <li><a href=\"#\">Trade-in</a></li>\r\n        <li><a href=\"#\">Cybertruck</a></li>\r\n        <li><a href=\"#\">Roadaster</a></li>\r\n      </BurgerNav>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Header\r\n\r\nconst Container = styled.div`\r\n    min-height: 60px;\r\n    position: fixed;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 0 20px;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 1;\r\n`;\r\n\r\nconst Menu = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex: 1;\r\n\r\n    a {\r\n        font-weight: 600;\r\n        text-transform: uppercase;\r\n        padding: 0 10px;\r\n        flex-wrap: nowrap;\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n        display: none;\r\n    }\r\n`;\r\n\r\nconst RightMenu = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    a {\r\n        font-weight: 600;\r\n        text-transform: uppercase;\r\n        margin-right: 10px;\r\n    }\r\n`;\r\n\r\nconst CustomMenu = styled(MenuIcon)`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst BurgerNav = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    background: white;\r\n    width: 300px;\r\n    z-index: 16;\r\n    list-style: none;\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-align: start;\r\n    transform: ${props => props.show ? 'translateX(0)' : 'translateX(100%)'};\r\n    transition: transform 0.2s;\r\n\r\n    li {\r\n        padding: 15px 0;\r\n        border-bottom: 1px solid rgba(0, 0, 0, 0.2);\r\n\r\n        a {\r\n            font-weight: 600;\r\n        }\r\n    }\r\n`;\r\n\r\nconst CustomClose = styled(CloseIcon)`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst CloseWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n`;","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Fade from 'react-reveal/Fade'\r\n\r\nfunction Section({ title, description, leftBtnText, rightBtnText, backgroundImg }) {\r\n  return (\r\n    <Wrap bgImage={backgroundImg}>\r\n\r\n      <Fade bottom>\r\n        <ItemText>\r\n          <h1>{title}</h1>\r\n          <p>\r\n            {description}\r\n          </p>\r\n        </ItemText>\r\n      </Fade>\r\n\r\n      <Buttons>\r\n\r\n        <Fade bottom>\r\n          <ButtonGroup>\r\n            <LeftButton>\r\n              {leftBtnText}\r\n            </LeftButton>\r\n\r\n            {rightBtnText &&\r\n              <RightButton>\r\n                {rightBtnText}\r\n              </RightButton>\r\n            }\r\n          </ButtonGroup>\r\n        </Fade>\r\n\r\n        <DownArrow src={`${process.env.PUBLIC_URL}/images/down-arrow.svg`} />\r\n      </Buttons>\r\n\r\n    </Wrap>\r\n  )\r\n}\r\n\r\nexport default Section\r\n\r\nconst Wrap = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-image: ${`url('${process.env.PUBLIC_URL}/images/model-s.jpg')`};\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between; // vertical\r\n    align-items: center; // horizontal\r\n    background-image: ${props => `url('${process.env.PUBLIC_URL}/images/${props.bgImage}')`};\r\n`;\r\n\r\nconst ItemText = styled.div`\r\n    padding-top: 15vh;\r\n    text-align: center;\r\n`;\r\n\r\nconst ButtonGroup = styled.div`\r\n    display: flex;\r\n    margin-bottom: 30px;\r\n\r\n    @media (max-width: 768px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nconst LeftButton = styled.div`\r\n    background-color: rgba(23, 26, 32, 0.8);\r\n    height: 40px;\r\n    width: 256px;\r\n    color: white;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 100px;\r\n    opacity: 0.85;\r\n    text-transform: uppercase;\r\n    font-size: 12px;\r\n    cursor: pointer;\r\n    margin: 8px;\r\n`;\r\n\r\nconst RightButton = styled(LeftButton)`\r\n    background-color: white;\r\n    color: black;\r\n    opacity: 0.65;\r\n`;\r\n\r\nconst DownArrow = styled.img`\r\n    height: 40px;\r\n    overflow-x: hidden;\r\n    animation: animateDown infinite 1.5s;\r\n`;\r\n\r\nconst Buttons = styled.div`\r\n\r\n`;","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Section from './Section'\r\n\r\nfunction Home() {\r\n    return (\r\n        <Container>\r\n            <Section \r\n                title='Model S'\r\n                description='Order Online for Touchless Delivery'\r\n                backgroundImg=\"model-s.jpg\"\r\n                leftBtnText='Custom Order'\r\n                rightBtnText='Existing Inventory'\r\n            />\r\n            <Section \r\n                title='Model Y'\r\n                description='Order Online for Touchless Delivery'\r\n                backgroundImg=\"model-y.jpg\"\r\n                leftBtnText='Custom Order'\r\n                rightBtnText='Existing Inventory'\r\n            />\r\n            <Section \r\n                title='Model 3'\r\n                description='Order Online for Touchless Delivery'\r\n                backgroundImg=\"model-3.jpg\"\r\n                leftBtnText='Custom Order'\r\n                rightBtnText='Existing Inventory'\r\n            />\r\n            <Section \r\n                title='Model X'\r\n                description='Order Online for Touchless Delivery'\r\n                backgroundImg=\"model-x.jpg\"\r\n                leftBtnText='Custom Order'\r\n                rightBtnText='Existing Inventory'\r\n            />\r\n            <Section \r\n                title='Lowest Cost Solar Panels in America'\r\n                description='Money-back guarantee'\r\n                backgroundImg=\"solar-panel.jpg\"\r\n                leftBtnText='Order Now'\r\n                rightBtnText='Learn More'\r\n            />\r\n            <Section \r\n                title='Solar for New Roofs'\r\n                description='Solar Roof Costs Less Than a New Roof Plus Solar Panels'\r\n                backgroundImg=\"solar-roof.jpg\"\r\n                leftBtnText='Order Now'\r\n                rightBtnText='Learn More'\r\n            />\r\n            <Section \r\n                title='Accessories'\r\n                description=''\r\n                backgroundImg=\"accessories.jpg\"\r\n                leftBtnText='Shop Now'\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Home\r\n\r\nconst Container = styled.div`\r\n    height: 100vh;\r\n\r\n`;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Home from './components/Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport carReducer from '../features/car/carSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    car: carReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}